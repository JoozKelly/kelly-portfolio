/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { a } from "@react-spring/three";
import islandScene from "../assets/3d/island3.glb";
import { useFrame, useThree } from "@react-three/fiber";

const Island = ({ isRotating, setIsRotating, setCurrentStage, setRotationSpeed, islandRotation, ...props }) => {
  const islandRef = useRef();

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(islandScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches
      ? e.touches[0].clientX
      : e.clientX;

    lastX.current = clientX;
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches
        ? e.touches[0].clientX
        : e.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      islandRef.current.rotation.y += delta * Math.PI * 0.01;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  }

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);
      islandRef.current.rotation.y += 0.01 * Math.PI;
      rotationSpeed.current = 0.001 * Math.PI; // Update speed
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);
      islandRef.current.rotation.y -= 0.01 * Math.PI;
      rotationSpeed.current = -0.001 * Math.PI; // Update speed
    }
  }

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsRotating(false);
      rotationSpeed.current = 0; // Reset speed after release
    }
  }

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.0001) {
        rotationSpeed.current = 0;
      }

      islandRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = islandRef.current.rotation.y;

      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

// Set the current stage based on the island's orientation
switch (true) {
  case normalizedRotation >= 3.15 && normalizedRotation <= 3.55:
    setCurrentStage(1);
    break;
  case normalizedRotation >= 3.95 && normalizedRotation <= 4.35:
    setCurrentStage(8);
    break;
  case normalizedRotation >= 4.75 && normalizedRotation <= 5.15:
    setCurrentStage(7);
    break;
  case normalizedRotation >= 5.55 && normalizedRotation <= 5.95:
    setCurrentStage(6);
    break;
  case normalizedRotation >= 0.35 && normalizedRotation <= 0.75:
    setCurrentStage(5);
    break;
  case normalizedRotation >= 1.15 && normalizedRotation <= 1.55:
    setCurrentStage(4);
    break;
  case normalizedRotation >= 1.95 && normalizedRotation <= 2.35:
    setCurrentStage(3);
    break;
  case normalizedRotation >= 2.75 && normalizedRotation <= 3.05:
    setCurrentStage(2);
    break;
  default:
    setCurrentStage(null);
}
    }

    setRotationSpeed(rotationSpeed.current);
  })

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    }
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove])

  /*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/


return (
    <a.group ref={islandRef} {...props}>
      {/* Group with Plane024 mesh */}
      <group position={[-3.16, 0.313, 0.189]} rotation={[Math.PI, -1.568, Math.PI]} scale={0.068}>
        <mesh
          geometry={nodes?.Plane024?.geometry}
          material={materials?.['Material.009']}
        />
        <mesh
          geometry={nodes?.Plane024_1?.geometry}
          material={materials?.['Material.089']}
        />
      </group>

      {/* Group with Sphere001 meshes */}
      <group position={[-2.083, 0.814, 1.806]} rotation={[Math.PI, -0.727, Math.PI]} scale={0.055}>
        <mesh
          geometry={nodes?.Sphere001?.geometry}
          material={materials?.['FirstTexture.001']}
        />
        <mesh
          geometry={nodes?.Sphere001_1?.geometry}
          material={materials?.['Material.001']}
        />
        <mesh
          geometry={nodes?.Sphere001_2?.geometry}
          material={materials?.['material_0.001']}
        />
        <mesh
          geometry={nodes?.Sphere001_3?.geometry}
          material={materials?.['Material.004']}
        />
        <mesh
          geometry={nodes?.Sphere001_4?.geometry}
          material={materials?.['Material.017']}
        />
        <mesh
          geometry={nodes?.Sphere001_5?.geometry}
          material={materials?.['Material.085']}
        />
      </group>

      {/* Other meshes */}
      <mesh
        geometry={nodes?.Circle001?.geometry}
        material={materials?.['Material.014']}
        position={[0, 0.006, 0]}
        scale={[3.9, 4.682, 3.9]}
      />
      <mesh
        geometry={nodes?.Circle002?.geometry}
        material={materials?.['Material.016']}
        position={[0, 0.324, 0]}
        scale={3.879}
      />

      {/* Group with Plane020 meshes */}
      <group position={[-0.585, 2.228, -0.442]} rotation={[Math.PI / 2, 0, -1.358]} scale={0.041}>
        <mesh
          geometry={nodes?.Plane020?.geometry}
          material={materials?.['Material.002']}
        />
        <mesh
          geometry={nodes?.Plane020_1?.geometry}
          material={materials?.['Material.003']}
        />
      </group>

      {/* Other Meshes */}
      <mesh
        geometry={nodes?.Plane?.geometry}
        material={materials?.['Material.015']}
        position={[0, 0.055, 0]}
        scale={4.618}
      />

      <group position={[2.58, 0.704, -0.73]} rotation={[-Math.PI / 2, 0, 1.779]} scale={0.042}>
        <mesh
          geometry={nodes?.Cluster_Frente_0001_1?.geometry}
          material={materials?.['Frente.002']}
        />
        <mesh
          geometry={nodes?.Cluster_Frente_0001_2?.geometry}
          material={materials?.['Material.021']}
        />
        <mesh
          geometry={nodes?.Cluster_Frente_0001_3?.geometry}
          material={materials?.['MetalCase.001']}
        />
      </group>

      <group position={[2.418, 0.452, 1.431]} rotation={[-1.552, 0.006, 0.915]} scale={0.295}>
        <mesh
          geometry={nodes?.['BUR_T6_4_PERRONE_01001_Pavillon-M001_0001']?.geometry}
          material={materials?.['Pavillon-M.001']}
        />
        <mesh
          geometry={nodes?.['BUR_T6_4_PERRONE_01001_Pavillon-M001_0001_1']?.geometry}
          material={materials?.['Material.005']}
        />
        <mesh
          geometry={nodes?.['BUR_T6_4_PERRONE_01001_Pavillon-M001_0001_2']?.geometry}
          material={materials?.Windows}
        />
        <mesh
          geometry={nodes?.['BUR_T6_4_PERRONE_01001_Pavillon-M001_0001_3']?.geometry}
          material={materials?.Metal}
        />
        <mesh
          geometry={nodes?.['BUR_T6_4_PERRONE_01001_Pavillon-M001_0001_4']?.geometry}
          material={materials?.['Material.006']}
        />
      </group>
    </a.group>
  );
}

export default Island;